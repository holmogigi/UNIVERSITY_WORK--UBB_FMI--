import unittest
from board import *
from services import *
from validator import *

class Tests(unittest.TestCase):

    def test_add_yellow(self):
        board=Board()
        board.clear_board()

        board.add_yellow(1)
        self.assertEqual(board.get_items()[5,1],'⚫')
        board.add_yellow(0)
        self.assertEqual(board.get_items()[5, 0], '⚫')
        board.add_yellow(0)
        self.assertEqual(board.get_items()[4, 0], '⚫')
        board.add_yellow(0)
        self.assertEqual(board.get_items()[3, 0], '⚫')
        board.add_yellow(0)
        self.assertEqual(board.get_items()[2, 0], '⚫')
        board.add_yellow(0)
        self.assertEqual(board.get_items()[1, 0], '⚫')
        board.add_yellow(0)
        self.assertEqual(board.get_items()[0, 0], '⚫')

        self.assertRaises(Exception, lambda: board.add_yellow(0))

    def test_add_red(self):
        board=Board()
        board.clear_board()

        board.add_red(1)
        self.assertEqual(board.get_items()[5,1],'○')
        board.add_red(0)
        self.assertEqual(board.get_items()[5, 0], '○')
        board.add_red(0)
        self.assertEqual(board.get_items()[4, 0], '○')
        board.add_red(0)
        self.assertEqual(board.get_items()[3, 0], '○')
        board.add_red(0)
        self.assertEqual(board.get_items()[2, 0], '○')
        board.add_red(0)
        self.assertEqual(board.get_items()[1, 0], '○')
        board.add_red(0)
        self.assertEqual(board.get_items()[0, 0], '○')

        self.assertRaises(Exception, lambda: board.add_red(0))

    def test_check_diagonally(self):
        board=Board()
        board.clear_board()

        self.assertEqual(board.check_diagonally(),0)
        board.add_red(0)
        board.add_yellow(1)
        board.add_red(1)
        board.add_yellow(2)
        board.add_yellow(2)
        board.add_red(2)
        board.add_yellow(3)
        board.add_yellow(3)
        board.add_yellow(3)
        self.assertEqual(board.check_diagonally(), 0)
        board.add_red(3)
        self.assertEqual(board.check_diagonally(), 1)

        board.clear_board()

        self.assertEqual(board.check_diagonally(), 0)
        board.add_red(6)
        board.add_yellow(5)
        board.add_red(5)
        board.add_yellow(4)
        board.add_yellow(4)
        board.add_red(4)
        board.add_yellow(3)
        board.add_yellow(3)
        board.add_yellow(3)
        self.assertEqual(board.check_diagonally(), 0)
        board.add_red(3)
        self.assertEqual(board.check_diagonally(), 1)

        board.clear_board()

        self.assertEqual(board.check_diagonally(), 0)
        board.add_yellow(5)
        board.add_red(5)
        board.add_yellow(4)
        board.add_yellow(4)
        board.add_red(4)
        board.add_yellow(3)
        board.add_yellow(3)
        board.add_yellow(3)
        board.add_red(3)
        board.add_yellow(2)
        board.add_yellow(2)
        board.add_yellow(2)
        board.add_red(2)
        self.assertEqual(board.check_diagonally(), 0)
        board.add_red(2)
        self.assertEqual(board.check_diagonally(), 1)

    def test_check_vertically(self):
        board=Board()
        board.clear_board()

        self.assertEqual(board.check_vertically(), 0)
        board.add_red(0)
        board.add_red(0)
        board.add_red(0)
        board.add_red(0)
        self.assertEqual(board.check_vertically(), 1)

        board.clear_board()

        self.assertEqual(board.check_vertically(), 0)
        board.add_yellow(0)
        board.add_yellow(0)
        board.add_yellow(0)
        board.add_yellow(0)
        self.assertEqual(board.check_vertically(), 1)

        board.clear_board()

        self.assertEqual(board.check_vertically(), 0)
        board.add_yellow(0)
        board.add_yellow(0)
        self.assertEqual(board.check_vertically(), 0)
        board.add_red(0)
        board.add_red(0)
        board.add_red(0)
        board.add_red(0)
        self.assertEqual(board.check_vertically(), 1)

        board.clear_board()

        self.assertEqual(board.check_vertically(), 0)
        board.add_yellow(6)
        board.add_yellow(6)
        board.add_yellow(6)
        board.add_yellow(6)
        self.assertEqual(board.check_vertically(), 1)

        board.clear_board()

        self.assertEqual(board.check_vertically(), 0)
        board.add_yellow(5)
        board.add_yellow(5)
        self.assertEqual(board.check_vertically(), 0)
        board.add_red(5)
        board.add_red(5)
        board.add_red(5)
        board.add_red(5)
        self.assertEqual(board.check_vertically(), 1)

        board.clear_board()

        self.assertEqual(board.check_vertically(), 0)
        board.add_yellow(0)
        board.add_yellow(0)
        board.add_red(0)
        board.add_red(0)
        board.add_red(0)
        board.add_red(2)
        self.assertEqual(board.check_vertically(), 0)
        board.add_red(0)
        self.assertEqual(board.check_vertically(), 1)

    def test_check_horizontally(self):
        board=Board()
        board.clear_board()

        self.assertEqual(board.check_horizontally(), 0)
        board.add_yellow(0)
        board.add_yellow(1)
        board.add_yellow(2)
        board.add_yellow(3)
        self.assertEqual(board.check_horizontally(), 1)

        board.clear_board()

        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(6)
        board.add_red(5)
        board.add_red(4)
        board.add_red(3)
        self.assertEqual(board.check_horizontally(), 1)

        board.clear_board()

        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(6)
        board.add_red(5)
        board.add_red(4)
        board.add_yellow(3)
        self.assertEqual(board.check_horizontally(), 0)

        board.clear_board()

        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(0)
        board.add_yellow(1)
        board.add_red(2)
        board.add_yellow(3)
        board.add_red(4)
        board.add_yellow(5)
        board.add_red(6)
        self.assertEqual(board.check_horizontally(), 0)
        board.add_yellow(0)
        board.add_yellow(1)
        board.add_yellow(2)
        board.add_yellow(3)
        self.assertEqual(board.check_horizontally(), 1)

        board.clear_board()

        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(0)
        board.add_yellow(1)
        board.add_red(2)
        board.add_yellow(3)
        board.add_red(4)
        board.add_yellow(5)
        board.add_red(6)
        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(0)
        board.add_yellow(1)
        board.add_red(2)
        board.add_yellow(3)
        board.add_red(4)
        board.add_yellow(5)
        board.add_red(6)
        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(0)
        board.add_yellow(1)
        board.add_red(2)
        board.add_yellow(3)
        board.add_red(4)
        board.add_yellow(5)
        board.add_red(6)
        self.assertEqual(board.check_horizontally(), 0)
        board.add_yellow(6)
        board.add_yellow(5)
        board.add_yellow(4)
        board.add_yellow(3)
        self.assertEqual(board.check_horizontally(), 1)

        board.clear_board()

        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(0)
        board.add_yellow(1)
        board.add_red(2)
        board.add_yellow(3)
        board.add_red(4)
        board.add_yellow(5)
        board.add_red(6)
        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(0)
        board.add_yellow(1)
        board.add_red(2)
        board.add_yellow(3)
        board.add_red(4)
        board.add_yellow(5)
        board.add_red(6)
        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(0)
        board.add_yellow(1)
        board.add_red(2)
        board.add_yellow(3)
        board.add_red(4)
        board.add_yellow(5)
        board.add_red(6)
        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(0)
        board.add_yellow(1)
        board.add_red(2)
        board.add_yellow(3)
        board.add_red(4)
        board.add_yellow(5)
        board.add_red(6)
        self.assertEqual(board.check_horizontally(), 0)
        board.add_red(0)
        board.add_yellow(1)
        board.add_red(2)
        board.add_yellow(3)
        board.add_red(4)
        board.add_yellow(5)
        board.add_red(6)
        self.assertEqual(board.check_horizontally(), 0)
        board.add_yellow(6)
        board.add_yellow(5)
        board.add_yellow(4)
        board.add_yellow(3)
        self.assertEqual(board.check_horizontally(), 1)

    def test_validator(self):
        validator=Validator()

        self.assertEqual(validator.validate_collum('0'), 0)
        self.assertEqual(validator.validate_collum('-1'),0)
        self.assertEqual(validator.validate_collum('a'),0)
        self.assertEqual(validator.validate_collum(' '),0)
        self.assertEqual(validator.validate_collum('100'),0)
        self.assertEqual(validator.validate_collum('sd239j2hsdaa'),0)

        self.assertEqual(validator.validate_collum('1'),1)
        self.assertEqual(validator.validate_collum('2'),1)
        self.assertEqual(validator.validate_collum('3'),1)
        self.assertEqual(validator.validate_collum('4'),1)
        self.assertEqual(validator.validate_collum('5'),1)
        self.assertEqual(validator.validate_collum('6'),1)
        self.assertEqual(validator.validate_collum('7'),1)

