I.1
; A. Fie următoarea definiţie de funcţie ȋn LISP


(DEFUN F(L)
  (COND
    ((ATOM L) -1)
    ((> (F (CAR L)) 0) (+ (CAR L) (F (CAR L)) (F (CDR L))))
    (T (F (CDR L)))
  )
)


; Rescrieți această definiție pentru a evita dublul apel recursiv (F (CAR L)), fără a redefini logica
; clauzelor și fără a folosi o funcție auxiliară. Nu folosiți SET, SETQ, SETF. Justificați răspunsul.

(defun f(l)
  (cond
    ((atom l) -1)
    (t ((lambda (x)
         (cond
           ((> x 2)(+ (car l) x (f (cdr l))))
           (t (f (cdr l)))
         )
        ) (f (car l))
       )
     )
   )
)

I.2
% A. Fie următoarea definiţie de predicat PROLOG f(integer, integer), având modelul de flux (i, o):

f(1, 1):-!.
f(K,X):-K1 is K-1, f(K1,Y), Y>1, !, K2 is K1-1, X is K2.
f(K,X):-K1 is K-1, f(K1,Y), Y>0.5, !, X is Y.
f(K,X):-K1 is K-1, f(K1,Y), X is Y-1.

% Rescrieți această definiție pentru a evita apelul recursiv f(J,V) în clauze,
% fără a redefini logica clauzelor. Justificați răspunsul.

f1(1, 1):-!.
f1(K,X):-
    K1 is K-1,
    f1(K1,Y),
    aux(Y,K1,X).

aux(Y,K1,X):-
    Y > 1,
    !,
    X is K1 - 1.
aux(Y,_,Y):-
    Y > 0.5,
    !.
aux(Y,_,X):-
    X is Y - 1.


II.
% B. Să se scrie un program PROLOG care generează lista aranjamentelor de k elemente
%    dintr-o listă de numere întregi, pentru care produsul elementelor e mai mic decât
%    o valoare V dată. Se vor scrie modelele matematice și modelele de flux pentru predicatele folosite.
%    
% Exemplu- pentru lista [1, 2, 3], k=2 și V=7 ⇒ [[1,2],[2,1],[1,3],[3,1],[2,3],[3,2]] (nu neapărat în această ordine)


% insert(l1l2...ln, elem) = 
% = {elem} U l1l2...ln
% = {l1} U insert(l2...ln, elem)

% insert(L:list, E:element, R:list)
% (i,i,o)

insert(L,E,[E|L]).
insert([H|T],E,[H|R]):-
    insert(T,E,R).


% arr(l1l2...ln, k) = 
% = l1, if k = 1
% = arr(l1l2...ln, k), if k >= 1
% = insert(l1, arr(l2...ln, k - 1)), if k > 1

% arr(L:list, K:number, R:list)
% (i,i,o)

arr([H|_],1,[H]).
arr([_|T],K,R):-
    arr(T,K,R).
arr([H|T],K,R1):-
    K > 1,
    K1 is K - 1,
    arr(T,K1,R),
    insert(R,H,R1).

% productElems(l1l2...ln) = 
% = 1, if n = 0
% = l1 * productElems(l2...ln), otherwise

% productElems(L:list, R:number)
% (i,o)

productElems([],1).
productElems([H|T],R1):-
    productElems(T,R),
    R1 is H*R.

% checkProduct(l1l2...ln, v) = 
% = true, if productElems(l1l2...ln) < v
% = false, otherwise

checkProduct(L,V):-
    productElems(L,RP),
    RP < V.

% oneSol(L:list, K:number, V:number, R:list)
% (i,i,o)

oneSol(L,K,V,R):-
    arr(L,K,R),
    checkProduct(R,V).

% allSols(L:list, K:number, V:number, R:result list)
% (i,i,i,o)

allSols(L,K,V,R):-
    findall(RPartial,oneSol(L,K,V,RPartial),R).


III.
; C. Se dă o listă neliniară și se cere înlocuirea valorilor numerice pare cu numărul natural succesor.
;    Se va folosi o funcție MAP.

; Exemplu pentru lista (1 s 4 (2 f (7))) va rezulta (1 s 5 (3 f (7))).


; replaceNumbers(l) = 
; = l + 1, if l is a number and l % 2 == 0
; = l, if l is an atom
; = replaceNumbers(l1) U ... U replaceNumbers(ln), otherwise (l = l1l2...ln)

(defun replaceNumbers(l)
  (cond
    ((and (numberp l) (eq (mod l 2) 0)) (+ 1 l))
    ((atom l) l)
    (t (mapcar #' replaceNumbers l))
  )
)