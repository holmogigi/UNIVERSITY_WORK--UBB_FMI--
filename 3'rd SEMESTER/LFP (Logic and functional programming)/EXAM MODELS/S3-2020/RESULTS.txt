I.1
; A. Fie următoarea definiţie de funcţie LISP

(DEFUN F(L)
  (COND
    ((NULL L) 0)
    ((> (F (CAR L)) 2) (+ (CAR L) (F (CDR L))))
    (T (F (CAR L)))
  )
)

; Rescrieți această definiție pentru a evita dublul apel recursiv (F (CAR L)), fără a redefini logica clauzelor și fără a folosi o
; funcție auxiliară. Nu folosiți SET, SETQ, SETF. Justificați răspunsul.


(defun f1(l)
  (cond
    ((null l) 0)
    (((lambda (x)
      (cond
        ((> x 2) (+ (car l) (f1 (cdr l))))
        (t x)
      )
     )(f (car l))
    )
   )
  )
)

I.2
% A. Fie L o listă numerică şi următoarea definiţie de predicat PROLOG f(list, integer), având modelul de flux (i, o):

f([], 0).
f([H|T],S):-f(T,S1),H<S1,!,S is H+S1.
f([_|T],S):-f(T,S1), S is S1+2.

% Rescrieți această definiție pentru a evita apelul recursiv f(T,S) în ambele clauze, fără a redefini logica clauzelor.
%  Justificați răspunsul.

f1([], 0).
f1([H|T],S):-
    f1(T,S1),
    aux(S1,H,S).

aux(S1,H,S):-
    H < S1,
    !,
    S is H + S1.
aux(S1,_,S):-
    S is S1 + 2.


II.
% B. Dându-se o listă formată din numere întregi, să se genereze ȋn PROLOG lista submulţimilor
%    cu cel puţin N elemente având suma divizibilă cu 3. 
%    Se vor scrie modelele matematice și modelele de flux pentru predicatele folosite.

% Exemplu- pentru lista L=[2,3,4] și N=1 ⇒ [[3],[2,4],[2,3,4]] (nu neapărat în această ordine)


% subsets(l1l2...ln) = 
% = [], if n = 0
% = {l1} U subsets(l2...ln), if n >= 1
% = subsets(l2...ln), if n >= 1

% subsets(L:list, R:result list)
% (i,o)

subsets([],[]).
subsets([H|T],[H|R]):-
    subsets(T,R).
subsets([_|T],R):-
    subsets(T,R).

% computeSum(l1l2...ln) = 
% = 0, if n = 0
% = l1 + computeSum(l2...ln), otherwise

% computeSum(L:list, R:number)
% (i,o)

computeSum([],0).
computeSum([H|T],R1):-
    computeSum(T,R),
    R1 is R + H.

% checkSum(l1l2...ln) = 
% = true, if computeSum(l1l2...ln) % 3 == 0
% = false, otherwise

% checkSum(L:list)
% (i)

checkSum(L):-
    computeSum(L,RS),
    RS mod 3 =:= 0.

% myLength(l1l2...ln) = 
% = 0, if n = 0
% = 1 + myLength(l2...ln), otherwise

% myLength(L:list, R:number)
% (i,o)

myLength([],0).
myLength([_|T],R1):-
    myLength(T,R),
    R1 is R + 1.

% checkLength(l1l2...lm, n) = 
% = true, if myLength(l1l2...lm) >= n
% = false, otherwise

% checkLength(L:list, N:number)
% (i,i)

checkLength(L,N):-
    myLength(L,RL),
    RL >= N.

% oneSol(L:list, N:number, R:list)
% (i,i,o)

oneSol(L,N,R):-
    subsets(L,R),
    checkSum(R),
    checkLength(R,N).

allSols(L,N,R):-
    findall(RPartial, oneSol(L,N,RPartial),R).

III.
; C. Se consideră o listă neliniară. Să se scrie o funcţie LISP care să aibă ca rezultat
;    lista iniţială in care atomii de pe nivelul k au fost inlocuiti cu 0 
;    (nivelul superficial se consideră 1). Se va folosi o funcție MAP.
; Exemplu pentru lista (a (1 (2 b)) (c (d)))
; a) k=2 => (a (0 (2 b)) (0 (d))) b) k=1 => (0 (1 (2 b)) (c (d))) c) k=4 =>lista nu se modifică


; replaceElems(l, level, k) = 
; = 0, if l is an atom and if level = k
; = l, if l is an atom
; = replaceElems(l1, level + 1, k) U ... U replaceElems(ln, level + 1, k), otherwise (l = l1l2...ln)

(defun replaceElems(l level k)
  (cond
    ((and (atom l) (equal level k)) 0)
    ((atom l) l)
    (t (mapcar #' (lambda (a) (replaceElems a (+ 1 level) k)) l))
  )
)


(defun main(l k)
  (replaceElems l 0 k)
)